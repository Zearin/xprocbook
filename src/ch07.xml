<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:cx="http://xmlcalabash.com/ns/extensions"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:p="http://www.w3.org/ns/xproc"
         version="5.0-xproc" xml:id="varsandopts">
<info>
<title>Options, Variables, and Parameters</title>
</info>

<para>Options, variables, and parameters are all quite similar in one
way: they provide a mechanism for the pipeline author to name strings
that can be reused. However, despite their apparent similarity, each
has a different purpose. In this chapter, we're going to explore
what each is for and how they're used.</para>

<para>In broad strokes:</para>

<itemizedlist>
<listitem>
<para>Options provide a way to communicate additional information, options,
to a step: processing modes, validation settings, etc. They exist primarily
to allow pipeline authors and users to pass additional information to steps and
pipelines.</para>
</listitem>
<listitem>
<para>Variables provide a way to save the results of evaluating XPath
expressions. They exist primarily to allow pipeline authors to
organize and simplify their pipelines. Users have no direct access to
variables.</para>
</listitem>
<listitem>
<para>Parameters provide a way to pass additional information to a
class of steps (of which XSLT is the canonical example) without
requiring the pipeline to have any direct knowledge of that
information. They exist primarily to allow users to communicate with
steps inside the pipeline. Pipeline authors have no direct access to
parameters, though there are steps that allow them to obtain access.
</para>
</listitem>
</itemizedlist>

<para>Options and variables are actually quite similar; parameters are
something else entirely, so let's look at options and variables first.</para>

<section xml:id="options">
<title>Options</title>

<para>Steps, and pipelines, are units of processing designed
to operate on XML documents. A <step>p:xslt</step> step performs XSLT
processing, a <step>p:validate-with-xml-schema</step> step performs schema
validation, and so forth. They accept XML inputs and produce XML outputs.</para>

<para>But what about extra information that a step might need: in
XSLT, what is the initial mode?; in schema validation, is strict or
lax validation requested?; etc.</para>

<para>Those additional settings aren't XML documents, those are simple
flags, switches, or strings. Those are <emphasis>options</emphasis>.
Consider the “simple” pipeline we saw back in <xref
linkend="introduction"/>:</para>

<programlisting
><xi:include href="examples/simple.xpl" parse="text"
/></programlisting>

<para>It applies XInclude, validates against the DocBook RELAX NG grammar,
and then styles the result. This works great for DocBook processing. Suppose
you also want to do TEI processing. You could write another pipeline:</para>

<programlisting
><xi:include href="examples/tei.xpl" parse="text"
/></programlisting>

<para>And you could write another new pipeline for each new vocabulary
that you want to process. The problem with this approach is that it's
tedious and results in a lot of redundancy. Suppose after you've got
pipelines for five or six vocabularies, you discover that you need to pass
different options to the XInclude step, or that you want to perform some
other extra-grammatical check on the inputs? You have to edit each of the
pipelines to add this new functionality.</para>

<para>Even with only casual inspection, you can see that they're all
the same, they just use different names for the schemas and the
stylesheets. Instead of making different copies of this pipeline, you
could make the schema and stylesheet into
<emphasis>options</emphasis>:</para>

<example xml:id="simple-opts">
<title>A simple pipeline with options</title>
<programlisting
><xi:include href="examples/format.xpl" parse="text"
/></programlisting>
</example>

<para>Admittedly, on the surface, we've made the pipeline more complicated.
That's because we have to use the <step>p:load</step> step to load the
schema and the stylesheet. But the benefit of this additional complexity is
that our new pipeline will work for any RELAX NG grammar and XSLT stylesheet
combination, we simply pass the URIs for those documents in as options and
the pipeline does the rest<footnote><para>Alternatively, you could make the
grammar and the stylesheet into pipeline inputs; that's an equally reasonable
approach, but it doesn't illustrate the point I'm trying to make here.</para>
</footnote>.</para>

<para>As you can see, options can be referenced like variables in
XPath expressions.</para>

<para>If you run this pipeline with <filename>docbook.rng</filename>
and <filename>docbook.xsl</filename> for the <option>schema</option>
and <option>stylesheet</option> options, respectively, you'll get
DocBook validation and styling:</para>

<screen><prompt>$ </prompt><userinput>calabash -isource=dbdoc.xml format.xpl schema=docbook.rng stylesheet=docbook.xsl</userinput></screen>

<para> If you use
<filename>tei.rng</filename> and <filename>tei.xsl</filename>, the
exact same stylesheet will perform TEI validation and styling:</para>

<screen><prompt>$ </prompt><userinput>calabash -isource=teidoc.xml format.xpl schema=tei.rng stylesheet=tei.xsl</userinput></screen>

<para>But what if you don't specify any options?</para>

<para>If you run the pipeline in <xref linkend="simple-opts"/> without
any options, it will fail badly (the load step will fail with an error
along the lines of “undeclared variable in XPath expression”):</para>

<screen><prompt>$ </prompt><userinput>calabash -isource=doc.xml format.xpl</userinput>
<computeroutput>SEVERE: format.xpl:8:30:err:XD0023:Undeclared variable in XPath expression: $schema
SEVERE: It is a dynamic error if an XPath expression is encountered which cannot be
evaluated (because it is syntactically incorrect, contains references to unbound
variables or unknown functions, or for any other reason).</computeroutput></screen>

<para>As the pipeline author, there are two ways that you can fix
this: you can make the options required or you can give them default
values.</para>

<para>The <att>required</att> attribute is used to make them required:</para>

<programlisting><![CDATA[<p:pipeline xmlns:p="http://www.w3.org/ns/xproc"
            version='1.0'>
  <p:option name="schema" required="true"/>
  <p:option name="stylesheet" required="true"/>

  …]]></programlisting>

<para>If you make them required, the pipeline will not run without the
options (and the error will be something more comprehensible like
“required option not provided”):</para>

<screen><prompt>$ </prompt><userinput>calabash -isource=doc.xml format.xpl</userinput>
<computeroutput>SEVERE: format-optreq.xpl:3:44:err:XS0018:No value provided for required option "schema"
SEVERE: If an option is required, it is a static error to invoke the step without
specifying a value for that option.</computeroutput></screen>

<para>If you give them default values, then the specified default value
will be used if the caller doesn't provide a value.</para>

<para>In this case, because we used to get DocBook processing without
specifying any options, it probably makes sense to make those the
defaults.</para>

<programlisting><![CDATA[<p:pipeline xmlns:p="http://www.w3.org/ns/xproc"
            version='1.0'>
  <p:option name="schema" select="'docbook.rng'"/>
  <p:option name="stylesheet" select="'docbook.xsl'"/>

  …]]></programlisting>

<para>The following sections describe the option elements in more
detail.</para>

<para>Before we go on, however, we should point out that there's one
other possibility when dealing with options. Sometimes it makes sense to
require them, sometimes it makes sense to give them defaults, but sometimes
you'd like to do something more sophisticated. In those cases, you can use
the <function>p:value-available</function> function to test whether or not
values were provided and respond accordingly. For more information about
<function>p:value-available</function> and other extension functions,
see <xref linkend="functions"/>.</para>

<section xml:id="p.option">
<title>p:option</title>

<para>The <tag>p:option</tag> element is used when you are
<emphasis>declaring</emphasis> a step to specify
<emphasis>what options are allowed</emphasis>, whether or not they are
required and what default values they have, if any.</para>

<para>The <tag>p:option</tag> element can occur as a child of
<step>p:pipeline</step> (or <step>p:declare-step</step>) to
<emphasis>declare</emphasis> that the pipeline
<emphasis>has</emphasis> an option. In the simplest case, the
<tag>p:option</tag> simply specifies the name of the option:</para>

<cx:rng-pattern name="OptionDeclaration"/>

<para>Options are not often placed in a namespace, but they are
QNames, so you can if you want to. You can not, however, put them in
the XProc namespace. That's not allowed.</para>

<para>It may also specify that the option is required. If the
<att>required</att> attribute is not specified, it has the same effect
as explicitly setting it to <literal>false</literal>.</para>

<para>All options in XProc are simple string values, so there's no
provision for specifying any additional information about the option,
such as its type.</para>

<tip role="extension">
<para>XML Calabash has an option which enables options, variables,
and parameters to hold arbitrary values. Using this option makes
XML Calabash a non-conforming processor.</para>
</tip>

<para>It's also possible for the <tag>p:option</tag> to specify a
default value to be used when the caller does not provide a value for
the option. This is done with the <att>select</att> attribute:</para>

<cx:rng-pattern name="OptionSelect"/>

<para>The default value is an XPath expression. It can refer to
preceding options but the context node is undefined.</para>

<para>In summary:</para>

<variablelist>
<varlistentry>
<term><code>&lt;p:option name=”oname”/&gt;</code></term>
<listitem>
<para>Specifies an option named “<literal>oname</literal>”. The option is
not required and has no default value. If the caller doesn't specify a value,
it will be an error to attempt to refer to it in the pipeline.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><code>&lt;p:option name=”oname” required=”false”/&gt;</code></term>
<listitem>
<para>Specifies an option named “<literal>oname</literal>”. The option is
not required and has no default value. Just like the preceding example.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><code>&lt;p:option name=”oname”/ required=”true”&gt;</code></term>
<listitem>
<para>Specifies an option named “<literal>oname</literal>”. The option is
required. If the caller does not provide a value, the step will fail at runtime.
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><code>&lt;p:option name=”oname” select=”'some default value'/&gt;</code></term>
<listitem>
<para>Specifies an option named “<literal>oname</literal>” with the default
value “<literal>some default value</literal>”. If the caller doesn't specify
a value, it will be exactly as if they specified the value
“<literal>some default value</literal>”. (The pipeline cannot tell if an
option's value was explicitly provided or provided by default.)
</para>
</listitem>
</varlistentry>
<varlistentry>
<term><code>&lt;p:option name=”oname” select=”'some default value'” required=”true”/&gt;</code></term>
<listitem>
<para>This is an error. It makes no sense to provide a default value for a
required option so the specification does not allow it. A pipeline that contains
this will be statically rejected.
</para>
</listitem>
</varlistentry>
</variablelist>
</section>

<section xml:id="p.with-option">
<title>p:with-option</title>

<para>The <tag>p:with-option</tag> element is used when you are
<emphasis>calling</emphasis> a step to specify <emphasis>a value</emphasis>
for that option. You must specify the option name and a <att>select</att>
attribute containing an XPath
expression to provide its value. You may also specify an explicit binding
in order to set the context node.</para>

<cx:rng-pattern name="WithOptionSelect"/>

<para>If you do not specify an explicit binding, the binding comes from
the default readable port, if there is one. If there's no explicit binding
and no default readable port, then the context is undefined (and it's an
error to refer to it).</para>

<para>This example passes the value “5” to the option “<literal>depth</literal>”:
</para>

<programlisting>&lt;p:with-option name=”depth” select=”5”/&gt;</programlisting>

<para>This example passes the string value of the <att>version</att>
attribute on the document element as the value of the
“<literal>version</literal>” option:</para>

<programlisting>&lt;p:with-option name=”version” select=”/*/@version”/&gt;</programlisting>

<para>In order to evaluate this expression, the processor must have a document
to use as the context. As specified, the context will come from the default
readable port. You can specify an alternate context, most often this is
the output from some other step:</para>

<programlisting>&lt;p:with-option name=”version” select=”/*/@version”&gt;
  &lt;p:pipe step=”preceding” port=”result”/&gt;
&lt;/p:with-option/&gt;</programlisting>

<para>Here the context will be the document that appears on the
<port>result</port> port of the step with the name “<literal>preceding</literal>”.
</para>

<para>XPath expressions are evaluated in the context of a
<emphasis>single</emphasis> document. If a sequence of more than one document
appears in the context of a <tag>p:with-option</tag>, that will raise an
error. If you need to use a document from a step that generates a sequence
as the context, you can use <tag>p:split-sequence</tag> to extract exactly
the document you want to use.</para>

</section>
</section>

<section xml:id="variables">
<title>Variables</title>

<para>Variables are very similar to options. The principal difference is
that variables are entirely local to the pipeline, they're something that
the pipeline author uses to organize or simplify the pipeline. Callers
cannot change, or even see, the names or values of variables.</para>

<section xml:id="p.variable">
<title>p:variable</title>

<para>When you declare a variable, you must specify the variable's name
and a <att>select</att> expression to provide its value. You may also
specify an explicit binding in order to set the context node.</para>

<cx:rng-pattern name="VariableSelect"/>

<para>If you do not specify an explicit binding, the binding comes from
the default readable port, if there is one. If there's no explicit binding
and no default readable port, then the context is undefined (and it's an
error to refer to it).</para>

<para>Like options, variables may be in a namespace but may not be in
the XProc namespace.</para>

<para>This example specifies the value “5” for the
variable “<literal>depth</literal>”:
</para>

<programlisting>&lt;p:variable name=”depth” select=”5”/&gt;</programlisting>

<para>This example computes the “<literal>uri</literal>” value by resolving
the value of some preceding option or variable named “<literal>href</literal>”
against the base URI of a particular document:</para>

<programlisting>&lt;p:variable name=”uri” select=”resolve-uri($href, base-uri(/))”/&gt;</programlisting>

<para>In order to evaluate this expression, the processor must have a document
to use as the context. As specified, the context will come from the default
readable port. You can specify an alternate context, most often this is
the output from some other step:</para>

<programlisting>&lt;p:variable name=”uri” select=”resolve-uri($href, base-uri(/))”&gt;
  &lt;p:pipe step=”preceding” port=”result”/&gt;
&lt;/p:variable/&gt;</programlisting>

<para>Here the context will be the document that appears on the
<port>result</port> port of the step with the name “<literal>preceding</literal>”.
</para>

<para>XPath expressions are evaluated in the context of a
<emphasis>single</emphasis> document. If a sequence of more than one document
appears in the context of a <tag>p:variable</tag>, that will raise an
error. If you need to use a document from a step that generates a sequence
as the context, you can use <tag>p:split-sequence</tag> to extract exactly
the document you want to use.</para>

<section xml:id="var-placement">
<title>Variable placement</title>

<para>There's one oddity about variables: they can only occur at the beginning
of a compound step. In other words, you <emphasis>can't</emphasis> do this:</para>

<programlisting role="invalid"
><xi:include href="examples/invalid-vars.xpl" parse="text"
/></programlisting>

<para>You can't put a variable declaration between two steps. This may seem
like an odd restriction, but it's motivated by the fact that the order of
the steps in your pipeline document is not necessarily the order in which
they will be evaluated.</para>

<para>If variable declarations were allowed between two steps, and the order
of those steps was changed, the variable declaration might also have to be
moved. In order to determine where it could go (if the resulting pipeline was
even valid), the processor would have to examine the content of all the
XPath expressions used on all the steps in order to find out where the
variable was used (and consequently which steps it must precede).</para>

<para>No where else in XProc is the processor required to analyze the
XPath expressions (implementations can simply pass them off to an underlying
processor, without having to parse them directly). The working group was
unwilling to impose this additional burden on implementors just to satisfy
this single case.</para>

<para>Instead, it made two observations:</para>

<orderedlist>
<listitem>
<para>If variables are only allowed before the first step, then this
problem cannot arise.</para>
</listitem>
<listitem>
<para>The pipeline author can always insert a new <tag>p:group</tag>
if the value of a variable needs to be computed based on the output
of some step.</para>
</listitem>
</orderedlist>

<para>So our earlier invalid pipeline can be written as follows:</para>

<programlisting
><xi:include href="examples/valid-vars.xpl" parse="text"
/></programlisting>

<para>This is perfectly valid. There's no question that this is a
surprising state of affairs, but it doesn't actually impact the kinds
of processing that XProc can perform.</para>
</section>
</section>
</section>

<section xml:id="parameters">
<title>Parameters</title>

<para>Parameters suck. They make XProc more complicated, they
introduce a number of odd defaulting rules that the language would be
cleaner without, they use an input port in a very odd way, and they're
bound to cause all sorts of confusion. If the working group could have
thought of a way to get rid of them, it probably would have.</para>

<para>Parameters exist to solve a particular problem exemplified by
(but not unique to) XSLT. Consider that pipeline back up in <xref
linkend="simple-opts"/>. Suppose that it's used to process a document
with the DocBook XSL Stylesheets. The DocBook stylesheets have
<emphasis>more than 600 parameters</emphasis>: there are parameters
for chunking, profiling, table formating, refentry formatting, cross
reference, bibliography, and glossary styling, and on and on.</para>

<para>These parameters exist to allow users to control aspects of behavior
without having to edit the stylesheets. Now suppose you want to run
that pipeline and pass a parameter (or two, or ten) to XSLT? What
are the options?</para>

<variablelist>
<varlistentry><term>You can't.</term>
<listitem>
<para>It's simple, but it's not very satisfying. Given the success
and popularity of XSLT, it's likely that a lot of pipelines will use it.
Preventing any of them from using stylesheet parameters doesn't seem
like a good idea.
</para>
</listitem>
</varlistentry>
<varlistentry><term>You have to pass them explicitly on the XSLT step.</term>
<listitem>
<para>That means writing a different pipeline for every combination of
stylesheet options <emphasis>and values</emphasis> that you want to pass
to XSLT. I guess that's better than not being able to do it at all, but not
by much.
</para>
</listitem>
</varlistentry>
<varlistentry><term>Use options.</term>
<listitem>
<para>In many ways using options would be the cleanest answer. Except
that using options means every pipeline that includes XSLT will have
to provide a <tag>p:option</tag> for every possible parameter for
every possible stylsheet that it might run. I don't think very many
pipeline authors are going to want to put thousands of <tag>p:option</tag>
elements in each pipeline that uses XSLT and then thousands of
<tag>p:with-option</tag> elements on each call to <tag>p:xslt</tag>.
</para>
</listitem>
</varlistentry>
</variablelist>

<para>Given that none of those alternatives are practical, a new “parameters”
mechanism was invented. In many ways parameters are like options, except that
their names are not known in advance to the pipeline author.
</para>

<para>In the simplest case, it just works. Any parameters passed to the
pipeline are automatically passed to any step that expects parameters.
Under the covers there's quite a bit of magic going on. Let's take a closer
look. The descriptions that follow describe what an XProc processor does
<emphasis>in principle</emphasis>; an implementation is free to choose
a more efficient implementation in practice as long as it behaves as
if it did the steps described here.</para>

<para>Recall that a <tag>p:pipeline</tag> is just syntactic sugar for a
particular form of <tag>p:declare-step</tag>. <xref linkend="ex.pdecl"/>
shows the simplest XSLT pipeline using the fully explicit syntax.</para>

<example xml:id="ex.pdecl">
<title>Explicit parameter pipeline</title>
<programlisting
><xi:include href="examples/param-decl.xpl" parse="text"
/></programlisting>
</example>

<para>The first thing to observe is that it has a special “parameter”
input port. XProc's greatest strength is its ability to process XML documents;
to take advantage of this strength, parameters are mapped onto a special kind
of input port.</para>

<para>Suppose we run this pipeline as follows:</para>

<screen><prompt>$ </prompt><userinput>calabash -isource=dbdoc.xml -pbody.font.family=sans-serif param-decl.xpl</userinput></screen>

<para>where we've passed the parameter named
“<parameter>body.font.family</parameter>” to the pipeline with the
value “<literal>sans-serif</literal>”.</para>

<para>The first thing the server does is create a <tag>c:param-set</tag>
document containing all the parameters passed to the pipeline:</para>

<programlisting><![CDATA[<c:param-set>
  <c:param name="body.font.family" value="sans-serif"/>
</c:param-set>]]></programlisting>

<para>This document is sent to the pipeline on the
“<port>parameters</port>”
port.</para>

<para>The <tag>p:xslt</tag> step also has a parameter input port. When I
said the pipeline in <xref linkend="ex.pdecl"/> was fully explicit, I
left out a few details. The <emphasis>fully</emphasis> explicit version
is in <xref linkend="ex.pfdecl"/>.</para>

<example xml:id="ex.pfdecl">
<title>Fully explicit parameter pipeline</title>
<programlisting
><xi:include href="examples/param-fulldecl.xpl" parse="text"
/></programlisting>
</example>

<para>This version shows explicitly the ordinarily implicit binding
from the parameters input port on the <tag>p:xslt</tag> step to the
parameters input port on the containing pipeline.</para>

<para>Although this binding is most often implicit, it's important to
remember that it can be explicit. In rare circumstances, it may be
necessary to have more than one parameter input port. Consider the case,
for example where you want to run the <tag>p:xslt</tag> step twice in
a single pipeline but pass entirely separate sets of parameters to each
instance.</para>

<para>In this case, you can name multiple parameter input ports and
make the bindings explicit as shown in <xref linkend="ex.mdecl"/>.</para>

<example xml:id="ex.mdecl">
<title>Multiple parameter inputs</title>
<programlisting
><xi:include href="examples/param-mdecl.xpl" parse="text"
/></programlisting>
</example>

<para>The important thing to remember is that most of the defaulting
rules only apply when there's a single parameter input port.</para>

<section xml:id="p.with-param">
<title>p:with-param</title>

<para>Sometimes you want to construct or specify a parameter value in
the pipeline. For this purpose, you can use <tag>p:with-param</tag>.
Like <tag>p:with-option</tag>, it's used when you are
<emphasis>calling</emphasis> a step to specify <emphasis>a value</emphasis>
for a particular parameter. (There's no equivalent of <tag>p:option</tag>
because parameters are by definition not declared in the pipeline.)</para>

<para>You must specify the parameter name and a <att>select</att>
attribute containing an XPath expression to provide its value. You may
also specify an explicit binding in order to set the context
node.</para>

<cx:rng-pattern name="WithParamSelect"/>

<para>If you do not specify an explicit binding, the binding comes from
the default readable port, if there is one. If there's no explicit binding
and no default readable port, then the context is undefined (and it's an
error to refer to it).</para>

<para>This example passes the value “5” to the parameter “<literal>depth</literal>”:
</para>

<programlisting>&lt;p:with-param name=”depth” select=”5”/&gt;</programlisting>

<para>Because there can be multiple parameter input ports, there is also a
<att>port</att> attribute. You <emphasis>must</emphasis> specify the port
attribute if the step has more than one parameter input port. Otherwise,
the default is for the single parameter input port.</para>

<para>This example passes the string value of the <att>version</att>
attribute on the document element as the value of the
“<literal>version</literal>” parameter on the <port>params1</port>:</para>

<programlisting>&lt;p:with-param port=”params1” name=”version” select=”/*/@version”/&gt;</programlisting>

<para>In order to evaluate this expression, the processor must have a document
to use as the context. As specified, the context will come from the default
readable port. You can specify an alternate context, most often this is
the output from some other step:</para>

<programlisting>&lt;p:with-param port=”params1” name=”version” select=”/*/@version”&gt;
  &lt;p:pipe step=”preceding” port=”result”/&gt;
&lt;/p:with-param/&gt;</programlisting>

<para>Here the context will be the document that appears on the
<port>result</port> port of the step with the name “<literal>preceding</literal>”.
</para>

<para>XPath expressions are evaluated in the context of a
<emphasis>single</emphasis> document. If a sequence of more than one document
appears in the context of a <tag>p:with-param</tag>, that will raise an
error. If you need to use a document from a step that generates a sequence
as the context, you can use <tag>p:split-sequence</tag> to extract exactly
the document you want to use.</para>

<para>One important consequence of using <tag>p:with-param</tag> is that it
constitutes a binding for the parameter input port. If you use a single
<tag>p:with-param</tag> you must also make any pipe binding for the parameter
input port explicit.</para>

<para>FIXME: example</para>


</section>
</section>

<section xml:id="namespaces">
<title>Controlling in-scope namespaces</title>

<para>…</para>

<section xml:id="p.namespaces">
<title>p:namespaces</title>

<cx:rng-pattern name="Namespaces"/>

</section>
</section>

</chapter>
